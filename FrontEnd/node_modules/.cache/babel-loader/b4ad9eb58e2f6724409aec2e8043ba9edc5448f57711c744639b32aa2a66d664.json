{"ast":null,"code":"import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\nfunction scalePoint(point, scale, originPoint) {\n  const distanceFromOrigin = point - originPoint;\n  const scaled = scale * distanceFromOrigin;\n  return originPoint + scaled;\n}\n/**\r\n * Applies a translate/scale delta to a point\r\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n  if (boxScale !== undefined) {\n    point = scalePoint(point, boxScale, originPoint);\n  }\n  return scalePoint(point, scale, originPoint) + translate;\n}\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\nfunction applyAxisDelta(axis) {\n  let translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let originPoint = arguments.length > 3 ? arguments[3] : undefined;\n  let boxScale = arguments.length > 4 ? arguments[4] : undefined;\n  axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\r\n * Applies a translate/scale delta to a box\r\n */\nfunction applyBoxDelta(box, _ref) {\n  let {\n    x,\n    y\n  } = _ref;\n  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\nfunction applyTreeDeltas(box, treeScale, treePath) {\n  let isSharedTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var _a, _b;\n  const treeLength = treePath.length;\n  if (!treeLength) return;\n  // Reset the treeScale\n  treeScale.x = treeScale.y = 1;\n  let node;\n  let delta;\n  for (let i = 0; i < treeLength; i++) {\n    node = treePath[i];\n    delta = node.projectionDelta;\n    if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\") continue;\n    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n      transformBox(box, {\n        x: -node.scroll.offset.x,\n        y: -node.scroll.offset.y\n      });\n    }\n    if (delta) {\n      // Incoporate each ancestor's scale into a culmulative treeScale for this component\n      treeScale.x *= delta.x.scale;\n      treeScale.y *= delta.y.scale;\n      // Apply each ancestor's calculated delta into this component's recorded layout box\n      applyBoxDelta(box, delta);\n    }\n    if (isSharedTransition && hasTransform(node.latestValues)) {\n      transformBox(box, node.latestValues);\n    }\n  }\n  /**\r\n   * Snap tree scale back to 1 if it's within a non-perceivable threshold.\r\n   * This will help reduce useless scales getting rendered.\r\n   */\n  treeScale.x = snapToDefault(treeScale.x);\n  treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n  if (Number.isInteger(scale)) return scale;\n  return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n  axis.min = axis.min + distance;\n  axis.max = axis.max + distance;\n}\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\nfunction transformAxis(axis, transforms, _ref2) {\n  let [key, scaleKey, originKey] = _ref2;\n  const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n  const originPoint = mix(axis.min, axis.max, axisOrigin);\n  // Apply the axis delta to the final axis\n  applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\nfunction transformBox(box, transform) {\n  transformAxis(box.x, transform, xKeys);\n  transformAxis(box.y, transform, yKeys);\n}\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };","map":{"version":3,"names":["mix","hasTransform","scalePoint","point","scale","originPoint","distanceFromOrigin","scaled","applyPointDelta","translate","boxScale","undefined","applyAxisDelta","axis","min","max","applyBoxDelta","box","x","y","applyTreeDeltas","treeScale","treePath","isSharedTransition","_a","_b","treeLength","length","node","delta","i","projectionDelta","instance","style","display","options","layoutScroll","scroll","root","transformBox","offset","latestValues","snapToDefault","Number","isInteger","translateAxis","distance","transformAxis","transforms","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transform"],"sources":["F:/fyp/Ecommerce-Virtual-Reality-based-Web-Application/FrontEnd/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs"],"sourcesContent":["import { mix } from '../../utils/mix.mjs';\r\nimport { hasTransform } from '../utils/has-transform.mjs';\r\n\r\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\r\nfunction scalePoint(point, scale, originPoint) {\r\n    const distanceFromOrigin = point - originPoint;\r\n    const scaled = scale * distanceFromOrigin;\r\n    return originPoint + scaled;\r\n}\r\n/**\r\n * Applies a translate/scale delta to a point\r\n */\r\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\r\n    if (boxScale !== undefined) {\r\n        point = scalePoint(point, boxScale, originPoint);\r\n    }\r\n    return scalePoint(point, scale, originPoint) + translate;\r\n}\r\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\r\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\r\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\r\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\r\n}\r\n/**\r\n * Applies a translate/scale delta to a box\r\n */\r\nfunction applyBoxDelta(box, { x, y }) {\r\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\r\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\r\n}\r\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\r\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\r\n    var _a, _b;\r\n    const treeLength = treePath.length;\r\n    if (!treeLength)\r\n        return;\r\n    // Reset the treeScale\r\n    treeScale.x = treeScale.y = 1;\r\n    let node;\r\n    let delta;\r\n    for (let i = 0; i < treeLength; i++) {\r\n        node = treePath[i];\r\n        delta = node.projectionDelta;\r\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\r\n            continue;\r\n        if (isSharedTransition &&\r\n            node.options.layoutScroll &&\r\n            node.scroll &&\r\n            node !== node.root) {\r\n            transformBox(box, {\r\n                x: -node.scroll.offset.x,\r\n                y: -node.scroll.offset.y,\r\n            });\r\n        }\r\n        if (delta) {\r\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\r\n            treeScale.x *= delta.x.scale;\r\n            treeScale.y *= delta.y.scale;\r\n            // Apply each ancestor's calculated delta into this component's recorded layout box\r\n            applyBoxDelta(box, delta);\r\n        }\r\n        if (isSharedTransition && hasTransform(node.latestValues)) {\r\n            transformBox(box, node.latestValues);\r\n        }\r\n    }\r\n    /**\r\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\r\n     * This will help reduce useless scales getting rendered.\r\n     */\r\n    treeScale.x = snapToDefault(treeScale.x);\r\n    treeScale.y = snapToDefault(treeScale.y);\r\n}\r\nfunction snapToDefault(scale) {\r\n    if (Number.isInteger(scale))\r\n        return scale;\r\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\r\n}\r\nfunction translateAxis(axis, distance) {\r\n    axis.min = axis.min + distance;\r\n    axis.max = axis.max + distance;\r\n}\r\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\r\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\r\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\r\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\r\n    // Apply the axis delta to the final axis\r\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\r\n}\r\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\r\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\r\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\r\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\r\nfunction transformBox(box, transform) {\r\n    transformAxis(box.x, transform, xKeys);\r\n    transformAxis(box.y, transform, yKeys);\r\n}\r\n\r\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}