{"ast":null,"code":"import { mix } from './mix.es.js';\nimport { noopReturn } from './noop.es.js';\nimport { fillOffset, defaultOffset } from './offset.es.js';\nimport { progress } from './progress.es.js';\nimport { getEasingForSegment } from './easing.es.js';\nimport { clamp } from './clamp.es.js';\nfunction interpolate(output) {\n  let input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset(output.length);\n  let easing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noopReturn;\n  const length = output.length;\n  /**\r\n   * If the input length is lower than the output we\r\n   * fill the input to match. This currently assumes the input\r\n   * is an animation progress value so is a good candidate for\r\n   * moving outside the function.\r\n   */\n  const remainder = length - input.length;\n  remainder > 0 && fillOffset(input, remainder);\n  return t => {\n    let i = 0;\n    for (; i < length - 2; i++) {\n      if (t < input[i + 1]) break;\n    }\n    let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));\n    const segmentEasing = getEasingForSegment(easing, i);\n    progressInRange = segmentEasing(progressInRange);\n    return mix(output[i], output[i + 1], progressInRange);\n  };\n}\nexport { interpolate };","map":{"version":3,"names":["mix","noopReturn","fillOffset","defaultOffset","progress","getEasingForSegment","clamp","interpolate","output","input","length","easing","remainder","t","i","progressInRange","segmentEasing"],"sources":["F:/fyp/Ecommerce-Virtual-Reality-based-Web-Application/FrontEnd/node_modules/@motionone/utils/dist/interpolate.es.js"],"sourcesContent":["import { mix } from './mix.es.js';\r\nimport { noopReturn } from './noop.es.js';\r\nimport { fillOffset, defaultOffset } from './offset.es.js';\r\nimport { progress } from './progress.es.js';\r\nimport { getEasingForSegment } from './easing.es.js';\r\nimport { clamp } from './clamp.es.js';\r\n\r\nfunction interpolate(output, input = defaultOffset(output.length), easing = noopReturn) {\r\n    const length = output.length;\r\n    /**\r\n     * If the input length is lower than the output we\r\n     * fill the input to match. This currently assumes the input\r\n     * is an animation progress value so is a good candidate for\r\n     * moving outside the function.\r\n     */\r\n    const remainder = length - input.length;\r\n    remainder > 0 && fillOffset(input, remainder);\r\n    return (t) => {\r\n        let i = 0;\r\n        for (; i < length - 2; i++) {\r\n            if (t < input[i + 1])\r\n                break;\r\n        }\r\n        let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));\r\n        const segmentEasing = getEasingForSegment(easing, i);\r\n        progressInRange = segmentEasing(progressInRange);\r\n        return mix(output[i], output[i + 1], progressInRange);\r\n    };\r\n}\r\n\r\nexport { interpolate };\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,aAAa;AACjC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,EAAEC,aAAa,QAAQ,gBAAgB;AAC1D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,KAAK,QAAQ,eAAe;AAErC,SAASC,WAAW,CAACC,MAAM,EAA6D;EAAA,IAA3DC,KAAK,uEAAGN,aAAa,CAACK,MAAM,CAACE,MAAM,CAAC;EAAA,IAAEC,MAAM,uEAAGV,UAAU;EAClF,MAAMS,MAAM,GAAGF,MAAM,CAACE,MAAM;EAC5B;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,SAAS,GAAGF,MAAM,GAAGD,KAAK,CAACC,MAAM;EACvCE,SAAS,GAAG,CAAC,IAAIV,UAAU,CAACO,KAAK,EAAEG,SAAS,CAAC;EAC7C,OAAQC,CAAC,IAAK;IACV,IAAIC,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGJ,MAAM,GAAG,CAAC,EAAEI,CAAC,EAAE,EAAE;MACxB,IAAID,CAAC,GAAGJ,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,EAChB;IACR;IACA,IAAIC,eAAe,GAAGT,KAAK,CAAC,CAAC,EAAE,CAAC,EAAEF,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,EAAEL,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,EAAED,CAAC,CAAC,CAAC;IACtE,MAAMG,aAAa,GAAGX,mBAAmB,CAACM,MAAM,EAAEG,CAAC,CAAC;IACpDC,eAAe,GAAGC,aAAa,CAACD,eAAe,CAAC;IAChD,OAAOf,GAAG,CAACQ,MAAM,CAACM,CAAC,CAAC,EAAEN,MAAM,CAACM,CAAC,GAAG,CAAC,CAAC,EAAEC,eAAe,CAAC;EACzD,CAAC;AACL;AAEA,SAASR,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}